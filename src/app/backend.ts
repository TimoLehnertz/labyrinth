/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    get: operations["AppController_getHello"];
  };
  "/users/register": {
    post: operations["UsersController_register"];
  };
  "/friends": {
    get: operations["FriendsController_getFriends"];
  };
  "/friends/friend": {
    delete: operations["FriendsController_deleteFriend"];
  };
  "/friends/send-requests": {
    get: operations["FriendsController_getSendFriendRequests"];
  };
  "/friends/received-requests": {
    get: operations["FriendsController_getFriendRequests"];
  };
  "/friends/request": {
    post: operations["FriendsController_addFriendRequest"];
    delete: operations["FriendsController_deleteFriendRequest"];
  };
  "/friends/ignore-request": {
    put: operations["FriendsController_ignoreFriendRequest"];
  };
  "/auth/login": {
    post: operations["AuthController_login"];
  };
  "/auth/profile": {
    get: operations["AuthController_getProfile"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    RegisterDto: {
      username: string;
      email: string;
      password: string;
    };
    RegisterErrorResponse: {
      /** @enum {string} */
      message: "email taken" | "username taken";
    };
    User: {
      id: string;
      email: string;
      username: string;
    };
    Friendship: {
      id: string;
      usera: string;
      useraUser: components["schemas"]["User"];
      userb: string;
      userbUser: components["schemas"]["User"];
      /** Format: date-time */
      since: string;
    };
    DeleteFriendErrorResponse: {
      /** @enum {string} */
      message: "friendship does not exist";
    };
    FriendRequest: {
      id: string;
      initiator: string;
      initiatorUser: components["schemas"]["User"];
      requested: string;
      requestedUser: components["schemas"]["User"];
      /** Format: date-time */
      requestedAt: string;
      ignored: boolean;
    };
    AddFriendRequestErrorResponse: {
      /** @enum {string} */
      message: "same user" | "invalid user" | "already friends" | "already sent";
    };
    DeleteFriendRequestErrorResponse: {
      /** @enum {string} */
      message: "request does not exist";
    };
    IgnoreFriendRequestErrorResponse: {
      /** @enum {string} */
      message: "request not exist";
    };
    SignInDto: {
      usernameEmail: string;
      password: string;
    };
    LoginResponse: {
      access_token: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getHello: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  UsersController_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterDto"];
      };
    };
    responses: {
      /** @description The registration was successful */
      201: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["RegisterErrorResponse"];
        };
      };
    };
  };
  FriendsController_getFriends: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Friendship"][];
        };
      };
    };
  };
  FriendsController_deleteFriend: {
    parameters: {
      query: {
        friendshipID: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["DeleteFriendErrorResponse"];
        };
      };
    };
  };
  FriendsController_getSendFriendRequests: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FriendRequest"][];
        };
      };
    };
  };
  FriendsController_getFriendRequests: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FriendRequest"][];
        };
      };
    };
  };
  FriendsController_addFriendRequest: {
    parameters: {
      query: {
        username: string;
      };
    };
    responses: {
      /** @description Request was send successfully */
      201: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["AddFriendRequestErrorResponse"];
        };
      };
    };
  };
  FriendsController_deleteFriendRequest: {
    parameters: {
      query: {
        requestID: string;
      };
    };
    responses: {
      /** @description request was deleted */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["DeleteFriendRequestErrorResponse"];
        };
      };
    };
  };
  FriendsController_ignoreFriendRequest: {
    parameters: {
      query: {
        requestID: string;
      };
    };
    responses: {
      /** @description request was ignored */
      200: {
        content: never;
      };
      400: {
        content: {
          "application/json": components["schemas"]["IgnoreFriendRequestErrorResponse"];
        };
      };
    };
  };
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      /** @description incorrect username or password */
      401: {
        content: never;
      };
    };
  };
  AuthController_getProfile: {
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
}
